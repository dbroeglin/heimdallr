#!/usr/bin/env ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
require 'rubygems'

require 'bundler/setup'

require 'gli'
require 'heimdallr/version'
require 'heimdallr'

include GLI

program_desc 'Describe your application here'

version Heimdallr::VERSION

desc 'Describe some switch here'
switch [:s,:switch]


desc 'Monitors trafic for quality indicators'
arg_name ''
command :monitor do |c|
  c.desc 'Expression the dumped packets have to match'
  c.default_value ''
  c.arg_name 'expression'
  c.flag [:f, :capture_filter]
  
  c.desc 'Duration in seconds of each capture period before the capture files are analyzed'
  c.default_value 30
  c.arg_name 'duration'
  c.flag [:d, :duration]
  
  c.desc 'Name of the network interface or pipe used for packet capture'
  c.arg_name 'capture interface'
  c.flag [:i, :interface]

  c.action do |global_opts, opts, args|
    monitor = Heimdallr::Monitor::new(opts)
    begin
      monitor.run_dumper
    ensure
      monitor.kill_dumper
    end
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abourt and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit GLI.run(ARGV)
